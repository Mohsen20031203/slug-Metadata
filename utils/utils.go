package utils

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"time"
)

type AutoGenerated struct {
	Status struct{} `json:"status"`
	Data   []struct {
		ID                  int         `json:"id"`
		Rank                int         `json:"rank"`
		Name                string      `json:"name"`
		Symbol              string      `json:"symbol"`
		Slug                string      `json:"slug"`
		IsActive            int         `json:"is_active"`
		Status              int         `json:"status"`
		FirstHistoricalData time.Time   `json:"first_historical_data"`
		LastHistoricalData  time.Time   `json:"last_historical_data"`
		Platform            interface{} `json:"platform"`
	} `json:"data"`
}

type Token struct {
	Address  string   `json:"address"`
	Symbol   string   `json:"symbol"`
	Decimals int      `json:"decimals"`
	Name     string   `json:"name"`
	LogoURI  string   `json:"logoURI"`
	EIP2612  bool     `json:"eip2612"`
	Tags     []string `json:"tags"`
	CmcID    string   `json:"CmcID"`
}

type TokenData struct {
	Tokens map[string]Token `json:"tokens"`
}

func WriteFile[T any](file *os.File, tokenData T) error {
	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	if err := encoder.Encode(tokenData); err != nil {
		return fmt.Errorf("Error encoding data:", err)
	}
	return nil
}

func ReadFile(file *os.File, tokenData *AutoGenerated) {
	decoder := json.NewDecoder(file)
	if err := decoder.Decode(&tokenData.Data); err != nil {
		fmt.Println(err)
	}
}

func GetApi[T any](tokenData T, url string) (T, error) {
	resp, err := http.Get(url)
	if err != nil {
		return tokenData, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return tokenData, err
	}

	if err := json.Unmarshal(body, &tokenData); err != nil {
		log.Print(body)
		return tokenData, err
	}
	return tokenData, nil
}
