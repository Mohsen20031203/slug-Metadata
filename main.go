package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"time"
)

type AutoGenerated struct {
	Status struct{} `json:"status"`
	Data   []struct {
		ID                  int         `json:"id"`
		Rank                int         `json:"rank"`
		Name                string      `json:"name"`
		Symbol              string      `json:"symbol"`
		Slug                string      `json:"slug"`
		IsActive            int         `json:"is_active"`
		Status              int         `json:"status"`
		FirstHistoricalData time.Time   `json:"first_historical_data"`
		LastHistoricalData  time.Time   `json:"last_historical_data"`
		Platform            interface{} `json:"platform"`
	} `json:"data"`
}

func main() {
	var tokenData AutoGenerated

	for i := 0; ; i += 5000 {
		var url string

		url = fmt.Sprintf("https://api.vultisig.com/cmc/v1/cryptocurrency/map?sort=id&limit=%d&start=%d", 5000, i)
		if i == 0 {
			url = fmt.Sprintf("https://api.vultisig.com/cmc/v1/cryptocurrency/map?sort=id&limit=%d", 5000)
		}

		resp, err := http.Get(url)
		if err != nil {
			return
		}
		defer resp.Body.Close()

		body, err := io.ReadAll(resp.Body)
		if err != nil {
			return
		}

		if err := json.Unmarshal(body, &tokenData); err != nil {
			log.Print(body)
			return
		}
		if len(tokenData.Data) == 0 {
			break
		}
		file, err := os.OpenFile("ID-Slug.json", os.O_APPEND|os.O_CREATE|os.O_WRONLY|os.O_RDONLY, 0644)
		if err != nil {
			fmt.Println("Error opening/creating file:", err)
			return
		}
		defer file.Close()

		encoder := json.NewEncoder(file)
		encoder.SetIndent("", "  ")
		if err := encoder.Encode(tokenData); err != nil {
			fmt.Println("Error encoding data:", err)
		}
	}

}
